<?php

namespace App\Mainframe\Features\Datatable;

use URL;
use Str;
use App\Module;
use App\Mainframe\Features\Datatable\Traits\DatatableTrait;

/**
 * Class Datatable
 *
 * A class that handles server-side processing for jQuery DataTables with additional features and customizations.
 * This class provides configuration and functionality for creating and managing data tables in Laravel applications,
 * with support for AJAX loading, custom filtering, sorting, pagination, and formatting options.
 *
 * Key features:
 * - Server-side processing
 * - Custom column filtering and sorting
 * - Automatic date/datetime formatting
 * - Boolean value transformations
 * - Configurable pagination
 * - Search delay and minimum length settings
 * - Customizable DOM structure
 * - Support for modular implementation
 *
 * @property  \Yajra\DataTables\DataTableAbstract $dt  DataTable instance for server-side processing
 */
class Datatable
{
    use DatatableTrait;

    /**
     * Datatable DOM options
     * See: https://datatables.net/reference/option/dom
     *
     * @var string
     */
    public const DOM_WITH_BTN = 'Blftipr';
    public const DOM_WITHOUT_BTN = 'lftipr';

    /*
    |--------------------------------------------------------------------------
    | Customizations
    |--------------------------------------------------------------------------
    |
    */

    /**
     * Unique name of the data table. A JS variable will be created by
     * this name that will contain the datatable instance. If a
     * name is not provided, it will be autogenerated.
     *
     * @var string
     */
    public $name;

    /**
     * Datatable container class.
     *
     * @var string
     */
    public $containerClass;

    /**
     * Datatable main table class.
     *
     * @var string
     */
    public $tableClass;

    /**
     * DB table name that will be used as the data source.
     *
     * @var string
     */
    public $table;

    /**
     * For datatable of a module (ModularDatatable), this has to be set
     *
     * @var \App\Module
     */
    public $module;

    /**
     * For datatable of a module this has to be set.
     *
     * @var \App\Project\Features\Modular\BaseModule\BaseModule
     */
    public $model;

    /**
     * Instance of \Yajra\DataTables\DataTable
     * @ref https://yajrabox.com/docs/laravel-datatables/12.0
     *
     * @var \Yajra\DataTables\DataTableAbstract
     */
    public $dt;

    /**
     * List of columns that is allowed for search/sort.
     * @ref https://yajrabox.com/docs/laravel-datatables/12.0/whitelist
     *
     * @var string[]
     */
    public $whiteList = [];

    /**
     * List of columns that is not allowed for search/sort.
     * @ref https://yajrabox.com/docs/laravel-datatables/12.0/blacklist
     *
     * @var string[]
     */
    public $blackList = [];

    /**
     * Set columns that should not be escaped. (HTML)
     * Optionally merge the defaults from config.
     *
     * @var string[]
     * @depricated Automatically, all columns are considered as raw(html) columns. No longer
     * required to explicitly set this.
     */
    public $rawColumns = ['tenant_sl', 'id', 'name', 'is_active', 'action'];

    /**
     * Ajax data source URL.
     * The datatable will be rendered based on data coming from this URL.
     *
     * @var string
     */
    public $ajaxUrl;

    /**
     * If true, merge the current request/URL params with the Ajax URL
     *
     * @var bool
     */
    public $mergeRequest = true;

    /**
     * Default rows per page
     *
     * @var int
     */
    public $pageLength = 25;


    /**
     * Show marked(highlighted) matched text in the search result
     *
     * @var string
     */
    public $mark = true;

    /**
     * Show processing text
     *
     * @var bool
     */
    public $processing = true;

    /**
     * Activate AJAX-based data fetch from the server side
     *
     * @var bool
     */
    public $serverSide = true;


    /**
     * Shows options for rows per page
     *
     * @var string "[5, 10, 25, 50, 100]"
     */
    public $lengthMenu;


    /**
     * Datatable order/sorting config
     *
     * @var string "[[0, 'desc']]"
     */
    public $order;

    /**
     * Hide some fields that are already included in the
     * initial column list.
     *
     * @var array
     */
    public $hidden = [];

    /**
     * Define date fields that will be auto-formatted.
     * For module datatable this can be set in the model $dates attribute
     * data will be formatted user formatDate() function. The format
     * can be defined in
     * config/mainframe/config.php > date_format
     *
     * @var array
     */
    public $dates = [];

    /**
     * Define datetime fields that will be auto-formatted.
     * Value will be autoformatted use formatDatetime() function.
     * The format can be defined in:
     * config/mainframe/config.php > datetime_format
     *
     * @var array
     */
    public $datetimes = [];

    /**
     * Fields that contain boolean values. The output will as Yes/No
     * based on the value of this field
     *
     * @var array
     */
    public $booleans = [];

    /**
     * Array of fields to transform a value to some other value.
     * i.e., ['is_active' => [ '0' => 'Zero', '1' => 'One', ]]
     *
     * @var array
     */
    public $transforms = [];

    /**
     * List of columns that should be excluded from automatic filtering.
     * If these are included in request, they will be ignored.
     *
     * @var array
     */
    public $skipAutoFilterColumns = ['order'];


    /**
     * List of fields that should be searched in full text mode.
     *
     * @var string[]
     */
    public $fullTextFields = ['name'];


    /*
    |--------------------------------------------------------------------------
    | Mainframe Datatable blade customizations
    |--------------------------------------------------------------------------
    |
    |
    */
    /**
     * Show custom filters in datatable.
     * If set to true, custom filters will be shown. If set to false,
     * default filters will be shown.
     *
     * @var bool
     */
    public $showCustomFilter = true;

    /**
     * Filter on submit-button click.
     * If set to true filter will be applied on submit button click. If set to false, filter will be applied
     * whenever there is a change in the filter input.
     *
     * @var bool
     */
    public $filterOnSubmit = true;

    /**
     * Show filter reset button
     *
     * @var bool
     */
    public $showFilterResetBtn = true;


    /*
    |--------------------------------------------------------------------------
    | Datatable version 1.10 configs
    |--------------------------------------------------------------------------
    | @ref https://datatables.net/reference/option/
    |
    */

    /**
     *
     * --------------------------------------------------------------------------
     * Allow changing rows per page. If this is set to true, then the page length
     * selector will show
     * @ref https://datatables.net/reference/option/lengthChange
     *
     * @var bool
     */
    public $bLengthChange = true;

    /**
     * Show hide search options. If this is set to true search field will
     * be visible
     *
     * @var bool
     */
    public $bFilter = true;

    /**
     * Milliseconds to wait before requesting ajax search call.
     * Sometimes it is useful not to send a search request when a user
     * types the first letter.
     *
     * @var int
     */
    public $searchDelay = 2000;

    /**
     * Minimum character to type to initiate search.
     *
     * @var int
     */
    public $minLength = 3;

    /**
     * Show pagination. You can hide pagination and show all data if
     * the data amount is small (<500 rows)
     *
     * @var bool
     */
    public $bPaginate = true;

    /**
     * Show table info. This by default is shown at the bottom of the table.
     * I.e., 10 out of 123 rows showed
     *
     * @var bool
     */
    public $bInfo = true;

    /**
     * Defer render for performance optimization
     *
     * @var bool
     */
    public $bDeferRender = true;

    /**
     * Datatable dom options
     * See: https://datatables.net/reference/option/dom
     *
     * @var string
     */
    public $dom = self::DOM_WITH_BTN;


    /**
     * Constructor to initialize the table name
     *
     * @param  string|null  $table  Optional table name. Defaults to the predefined table property if null.
     * @return void
     * @throws \Exception If neither table parameter nor class table property is defined
     */
    public function __construct($table = null)
    {
        $this->table = $table ?: $this->table;
    }

    /**
     * @param  Module|string  $module
     * @return Datatable|bool
     */
    public function setModule($module)
    {
        if (is_string($module)) {
            $module = Module::byName($module);
        }

        if (!$module) {
            return false;
        }

        $this->module = $module;
        $this->setTable($this->module->tableName());
        $this->setModel($this->module->modelInstance());

        return $this;
    }

    /**
     * Sets the database table name that will be used as the data source for the datatable.
     * This method allows dynamic configuration of the table property after instantiation.
     *
     * @param  string  $table  The name of the database table
     * @return $this  Returns an instance of the current class for method chaining
     */
    public function setTable(string $table)
    {
        $this->table = $table;

        return $this;
    }

    /**
     * Set model
     *
     * @param  mixed  $model
     * @return $this
     */
    public function setModel($model)
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Set ajaxUrl
     *
     * @param  string  $ajaxUrl
     * @return $this
     */
    public function setAjaxUrl(string $ajaxUrl)
    {
        $this->ajaxUrl = $ajaxUrl;

        return $this;
    }

    /**
     * Define Ajax URL for json source
     *
     * @return string
     */
    public function ajaxUrl()
    {
        # Important! Check if a URL is already assigned
        if (!$this->ajaxUrl) {
            $this->ajaxUrl = route('datatable.json', classKey($this)); // Default common route for dynamic datatables
        }

        // Pass the current request params to datatable from the current URL of the page
        if ($this->mergeRequest) {
            $this->ajaxUrl = urlWithParams($this->ajaxUrl, parse_url(URL::full(), PHP_URL_QUERY));
        }

        return $this->ajaxUrl;
    }

    /**
     * Add additional params in the AJAX data source URL
     *
     * @param  array  $params
     * @return string
     */
    public function addUrlParam($params = [])
    {
        $this->ajaxUrl = urlWithParams($this->ajaxUrl(), $params);

        return $this->ajaxUrl;
    }

    /**
     * Datatable page length
     *
     * @return int
     */
    public function pageLength()
    {
        return $this->pageLength ?? 25;
    }

    /**
     * Show rows-per-page options.
     *
     * @return string
     */
    public function lengthMenu()
    {
        return $this->lengthMenu ?? "[5, 10, 25, 50, 100]";
        // return "[[10, 25, 50, -1], [10, 25, 50, 'All']]"; // -1 means no pagination. This is risky for large data.
    }

    /**
     * Datatable order/sorting definition
     *
     * @return string
     */
    public function order()
    {
        return $this->order ?? "[[0, 'desc']]";
    }

    /**
     * Allow datatable length change
     *
     * @return string
     */
    public function bLengthChange()
    {
        return !$this->bLengthChange ? 'false' : 'true';
    }

    /**
     * @return string
     */
    public function bPaginate()
    {
        return !$this->bPaginate ? 'false' : 'true';
    }

    /**
     * @return string
     */
    public function bFilter()
    {
        return !$this->bFilter ? 'false' : 'true';
    }

    /**
     * @return string
     */
    public function bInfo()
    {
        return !$this->bInfo ? 'false' : 'true';
    }

    /**
     * @return string
     */
    public function bDeferRender()
    {
        return !$this->bDeferRender ? 'false' : 'true';
    }

    /**
     * @return string
     */
    public function dom()
    {
        return $this->dom ?: 'Blftipr';
    }

    public function mark()
    {
        if (!$this->mark) {
            return 'false';
        }

        return 'true';
    }

    public function processing()
    {
        return !$this->processing ? 'false' : 'true';
    }

    public function serverSide()
    {
        return !$this->serverSide ? 'false' : 'true';
    }

    /**
     * @return int
     */
    public function searchDelay()
    {
        return $this->searchDelay;
    }

    /**
     * @return int
     */
    public function minLength()
    {
        return $this->minLength;
    }

    /**
     * Hide fields/columns
     *
     * @return array
     */
    public function hidden()
    {
        return $this->hidden ?? [];
    }

    /**
     * Get date fields
     *
     * @return array
     */
    public function dates()
    {
        return $this->dates ?? [];
    }

    /**
     * Get datetime fields
     *
     * @return array
     */
    public function datetimes()
    {
        return $this->datetimes ?? [];
    }

    /**
     * Get boolean fields
     *
     * @return array
     */
    public function booleans()
    {
        return $this->booleans ?? [];
    }

    /**
     * Get transform fields
     *
     * @return array
     */
    public function transforms()
    {
        return $this->transforms ?? [];
    }

    /**
     * Hide pagination, filter, buttons and info
     *
     * @return $this
     */
    public function minimal()
    {
        $this->bPaginate = false;
        $this->bFilter = false;
        $this->dom = self::DOM_WITHOUT_BTN;
        $this->bInfo = false;

        return $this;
    }

    /**
     * Datatable unique identifier
     *
     * @return string|null
     */
    public function identifier()
    {
        // if ($this->module) {
        //     return \Str::camel($this->module->name.'Dt');
        // }
        //
        // if ($this->table) {
        //     return \Str::camel($this->table.'Dt');
        // }

        return Str::camel(class_basename(get_called_class()).'Dt');
    }

    /**
     * The name should be CamelCase
     *
     * @return string
     */
    public function name()
    {
        if ($this->name) {
            return Str::camel($this->name);
        }

        return Str::camel($this->identifier());
    }

    /**
     * Datatable filter form id
     *
     * @return string
     */
    public function filterFormId()
    {
        return $this->name().'FilterForm';
    }

    /**
     * Filter on submit
     *
     * @return false
     */
    public function filterOnSubmit()
    {
        if (!$this->showCustomFilter()) {
            return false;
        }

        return $this->filterOnSubmit;
    }

    /**
     * Datatable name is used in the table id attribute
     *
     * @return string
     */
    public function id()
    {
        return $this->name();
    }

    /**
     * Get container class
     *
     * @return string
     */
    public function containerClass()
    {
        $class = '';

        if ($this->containerClass) {
            $class = $this->containerClass;
        }

        // This code is not the most optimal. But I want to show the full final classes in a single line
        return " {$this->name()}-container datatable-container table-responsive {$class} ";
    }

    /**
     * Get table class
     *
     * @return string
     */
    public function tableClass()
    {
        $class = 'table-condensed table-hover';

        if ($this->tableClass) {
            $class = $this->tableClass;
        }

        return " {$this->name()} table module-grid datatable {$class} ";
    }

    /**
     * Determine if custom filters should be shown
     *
     * @return bool
     */
    public function showCustomFilter()
    {
        return $this->showCustomFilter;
    }

    /**
     * Show filter reset button
     *
     * @return bool
     */
    public function showFilterResetBtn()
    {
        return $this->showFilterResetBtn;
    }

}
